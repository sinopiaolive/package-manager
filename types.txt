### why we want beta

F 1.0.0
F 1.1.0
F 1.2.0
F 1.3.0-beta.1

E1 -> F ^1.0.0
E2 -> F ^1.0.0
E3 -> F ^1.2.0
E4 -> F ^1.0.0

app manifest:

F ^1.3.0-beta.1
E1 ^1.0.0
E2 ^1.0.0
E3 ^1.0.0
E4 ^1.0.0




### how to deal with "< 2.0"

0   1.0
1   1.1-b
2   1.1
3   2.0-b
4   2.0

>= 1.0 < 2.0       => [1.0, 1.1-b, 1.1]
>= 1.1-b < 2.0     => [1.1-b, 1.1]
>= 2.0-b < 2.0     => [2.0-b]

questionable beta range = 2.0-*
"< 2.0" excludes the questionable beta range
  iff the lower bound does not fall into that range

=> expected behavior for the user!

intersection:
>= 1.0 < 2.0
>= 2.0-b < 2.0
should be empty

(>= 1.0 < 2) =>
  (1.0.0, 1.1.0-beta.1, 1.1.0)
Constraint {
    min: 1.0.0
    max: 1.1.0
}




### left path right path printing

A 1 -> X 1,2,3
B 1 -> X 2,3,4

deps:
X -> Constraint {
    min: 2
    max: 3
    min_justification: [(B, 1-1)]
    max_justification: [(A, 1-1)]
}

D 1 -> X 1
D 2 -> X 2
algo1 yields new dep:
X 1,2 paths: (
    left: [(D, [1,2])]
    right: [(D, [1,2])]
)

X 2 paths: (
    left: [(D, [1,2])]
    right: [(B, 1)]
)

C 1 -> X 4

conflict in X
D 2 -> X 2
C 1 -> X 4




### Types



stuff we want to Arc:
Version, PackageName
Depset (from cache)
not Arc:
Path (it's an im::List, so Arc already)
Constraint (only copied into Paths, already cheap)
JustifiedConstraint (never used more than once)


Constraint = Set<Arc<Version>>
JustifiedConstraint = (
    min: Arc<Version>
    max: Arc<Version> // inclusive
    min_justification: Path
    max_justification: Path
)
// Depset = Map<Arc<PackageName>, Arc<Constraint>>
Depset = Map<
  Arc<PackageName>,
  JustifiedConstraint
>
get_depset(package: Arc<PackageName>, version: Arc<Version>, path: Path)
  -> Result<Arc<Depset>, Failure>
JustifiedVersion = {
    version: Arc<Version>
    justified_constraint: JustifiedConstraint
}
PartialSolution = HamtMap<Arc<PackageName>, JustifiedVersion>
Solution = Map<Arc<PackageName>, Arc<Version>>

Path = List<(Arc<PackageName>, Arc<Constraint>)>
ExactPath = List<(Arc<PackageName>, Arc<Version>)>

solve(registry: Arc<Registry>, manifest: Arc<Manifest>) -> Result<Solution, ResolvedFailure>
solve_inner(
    registry_adapter: Arc<RegistryAdapter>,
    depset: Arc<Depset>,
    cheap: bool,
    partial_solution: PartialSolution
) -> Result<Solution, ResolvedFailure>

Failure = enum {
    Conflict(Conflict),
    PackageMissing(PackageMissing),
    UninhabitedConstraint(UninhabitedConstraint)
}
// TODO when we instantiate this, we could cheaply (but probably don't need to?)
// (1) drop half of each justified_constraint
// (2) null the constraint1_version_picked unless lower_constraint_max < upper_constraint_min
//
// so we get
// lower_constraint_max + path
// upper_constraint_min + path
Conflict = (
  conflicting_package: Arc<PackageName>,
  constraint1: JustifiedConstrain
  constraint1_version_picked: Option<Arc<Version>>,
  constraint2: JustifiedConstraint
)

// TODO the min/max path thing is maybe dodgy? need to think about again... maybe:
//   1 path for every version in constraint
//   drop contiguousness
//   opportunistically replace artificial constraints with real constraints when printing
//   be smart about picking good paths for edges of range


// TODO
ResolvedConflict = {
  conflicting_package: Arc<PackageName>
  constraint1: SemverConstraint
  constraint1_version_picked: Option<Arc<Version>>
  constraint1_path: ExactPath
  constraint2: SemverConstraint
  constraint2_path: ExactPath
}


PackageMissing = (
    package: Arc<PackageName>
    path: Path
)
UninhabitedConstraint = (
    package: Arc<PackageName>
    constraint: Arc<SemverConstraint>
    path: Path
)
// re-use the Failure for resolved failures by collapsing all the constraints in the paths
ResolvedFailure = Failure

// We need Conflict::constraint1_version_picked for a silly, rare reason:
A 1 -> X picked 2 (from constraint 1,2)
B 1 -> X 1
we need to print what we picked or the error message is confusing

// TODO when to resolve conflicts:
// (a) resolve all over the place
// (b) store a snapshot of deps, partial_solution state (immutable :-) )
// (c) Thunks, but they don't work?




### Conflict example

X conflicts

c1 = Constraint {
    min: 2
    max: 3
    min_justification: [(B, 0-1)]
    max_justification: [(A, 0-1)]
}
c2 = Constraint {
    min: 4
    max: 5
    min_justification: [(C, 0-1)]
    max_justification: [(D, 0-1)]
}

print
A 1 -> X 1-3   (from c1.max_justification)
C 1 -> X 4-6   (from c2.min_justification)













Rails
  1
  2
  3
Sass
  1
    Rails 1
  2
    Rails 3

Rails *
Sass *

union(Rails 1, Rails 3) -> Rails 1,2,3 with path (Sass [1,2]) // whoops

union(Rails 1, Rails 3) ->
Rails Constraint 1,3
  path[1] = (Sass 1)
  path[3] = (Sass 2)




Conflict
  2,3   can find Semver(1,2,3)
  4,5   can find Semver(4,5,6)

Conflict
  1,3
  2,4


A 1 -> B 1 -> X Semver(1,2,3)
C 1 -> D 1 -> X Semver(4,5,6)


A 1 -> B 1 -> X 3
C 1 -> D 1 -> X 4




A
  1
    X 4-5
  2
    X 4-5


X Constraint 4,5
  path[4] = (A, [1,2])
  path[5] = (A, [1,2])

X Constraint 4,5
  path[4] = (A, 2)
  path[5] = (A, 2)




A
  1
    X 4
  2
    X 5

A 1,2
run algo 1, get new constraint:
X Constraint 4,5
  path[4] = (A, 1)
  path[5] = (A, 2)

now we have
A 1,2
X 4,5


pick X
recurse for X=4





A
  1
  2
B
  1
  2
C
  1
  2

A 1,2
B 1,2
C 1,2






































